{"version":3,"sources":["Widgets/Map.js","Widgets/PassengerMaps.js"],"names":["lineTintArray","transformToCentre","position","left","top","transform","hoverResponse","type","id","line","flow","mapsStore","dispatch","hoverType","hoverID","Point","props","state","match","station","multiplier","this","radius","level","x","y","onClick","fill","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","HeatCircle","undefined","opacity","Path","x1","y1","x2","y2","additionalCoordinates","strokeWidth","coordinates","concat","points","lineJoin","lineCap","MapFuture","mapsState","getState","subscribe","setState","pathData","stationData","dashboardData","hotPowerGraph","widthIndex","width","heightIndex","height","heatMode","mode","pathSet","map","path","turnPoint","pointIndex","pointSet","point","heatBackgroundSet","Fragment","store","persistor","mapsExposedMethods","style","PassengerMaps","offset","Suspense","fallback","inward","outward"],"mappings":"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","file":"static/js/4.3143ae6a.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line} from \"react-konva\";\nimport \"../Overview/style.css\";\nimport {mapsStore, mapsExposedMethods} from '../Store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nexport const lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#E23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#000\", \"#000\", \"#E67874\", \"#009734\", \"#43B7AE\"\n]\nconst transformToCentre = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n}\n\nfunction hoverResponse(type, id, line, flow) {\n    mapsStore.dispatch({\n        type: 'hoverUpdate',\n        hoverType: type,\n        hoverID: id,\n        line: line,\n        flow: flow,\n    })\n}\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            line: this.props.line.match('^[0-9]+'),\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n    render() {\n        const basis = 2;\n        const multiplier = (this.props.type === \"1\") ? 3 : 2;\n        const radius = this.props.level * multiplier * basis;\n        return (\n            <Group x={this.props.x} y={this.props.y} onClick={this.props.onClick}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={(this.props.type === \"1\") ? '#171717' : this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\nclass HeatCircle extends React.Component {\n    render() {\n        const basis = 2;\n        const radius = this.props.level * basis;\n        return (\n            <Group x={this.props.x} y={this.props.y} onClick={this.props.onClick}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={this.props.tint === undefined ? '#B93' : this.props.tint}\n                    opacity={0.23}\n                />\n            </Group>\n        )\n    }\n}\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            additionalCoordinates: this.props.additionalCoordinates,\n            level: this.props.level,\n            line: this.props.line.match('^[0-9]+'),\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1\n        const coordinates = (this.state.additionalCoordinates !== undefined) ? [this.state.x1, this.state.y1].concat(this.state.additionalCoordinates).concat([this.state.x2, this.state.y2]) : [this.state.x1, this.state.y1, this.state.x2, this.state.y2]\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={coordinates}\n                stroke={lineTintArray[this.state.line]}\n                strokeWidth={strokeWidth}\n                lineJoin={'round'}\n                lineCap={'round'}\n                onClick={this.props.onClick}\n            />\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {mapsState: mapsStore.getState()}\n        mapsStore.subscribe(() => {\n            this.setState({mapsState: mapsStore.getState()})\n        })\n    }\n\n    render() {\n        const { pathData } = this.state.mapsState\n        const stationData = this.state.mapsState.dashboardData.hotPowerGraph\n        const widthIndex = this.props.width / 17500\n        const heightIndex = this.props.height / 20000\n        const heatMode = this.props.mode === '热力图'\n        const pathSet = pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    additionalCoordinates={(path.additionalCoordinates !== undefined) ? path.additionalCoordinates.map(function (turnPoint, pointIndex) {\n                        return((pointIndex / 2 === 0) ? turnPoint * widthIndex : turnPoint * heightIndex)\n                    }) : undefined}\n                    level={1}\n                    line={path.line}\n                    onClick={() => hoverResponse('path', path.id, path.line, path.id)} //last one to be changed\n                />\n            )\n        });\n        const pointSet = stationData.map(function (point) {\n            return (\n                <Point\n                    x={point.x * widthIndex} y={point.y * heightIndex}\n                    level={1}\n                    type={point.type}\n                    station={point.station}\n                    line={point.line}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                    onClick={() => hoverResponse('station', point.station, point.line, point.level)}\n                />\n            )\n        })\n        const heatBackgroundSet = stationData.map(function (point) {\n            if (heatMode) {\n                return (\n                <HeatCircle\n                    x={point.x * widthIndex} y={point.y * heightIndex}\n                    level={point.level}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                />\n                )\n            }\n            else {\n                return <React.Fragment />\n            }\n        })\n\n        return (\n            <PersistGate store={mapsStore} persistor={mapsExposedMethods}>\n                <Stage style={transformToCentre} width={this.props.width + 250} height={this.props.height + 50}>\n                    <Layer key={'FMHeat'}>\n                        {heatBackgroundSet}\n                    </Layer>\n                    <Layer key={'FMpaths'}>\n                        {pathSet}\n                    </Layer>\n                    <Layer key={'FMstations'}>\n                        {pointSet}\n                    </Layer>\n                </Stage>\n            </PersistGate>\n        )\n    }\n}\n\nexport default MapFuture","import React from \"react\";\nimport {Circle, Group, Ring, Text, Stage, Layer} from \"react-konva\";\nimport {mapsExposedMethods, mapsStore} from \"../Store\";\nimport {PersistGate} from \"redux-persist/integration/react\";\nimport {lineTintArray} from \"./Map\";\n\nconst transformToCentre = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n}\n\nfunction hoverResponse(id, inward, outward) {\n    mapsStore.dispatch({\n        type: 'hoverUpdate',\n        hoverType: 'age',\n        hoverID: id,\n        inward: inward,\n        outward: outward\n    })\n}\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x: this.props.x,\n            y: this.props.y,\n            level: this.props.level,\n            line: this.props.line.match('^[0-9]+'),\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n    render() {\n        const basis = 3;\n        const multiplier = (this.props.type === \"1\") ? 0.3 : 0.15;\n        const radius = this.state.level * multiplier + basis;\n        return (\n            <Group x={this.state.x} y={this.state.y} onClick={this.props.onClick}>\n                <Circle\n                    radius={radius}\n                    fill={(this.props.type === \"1\") ? '#171717' : this.props.tint}\n                />\n                <Ring\n                    innerRadius={radius}\n                    outerRadius={radius+3}\n                    fill={'#FFF'}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\n\nclass PassengerMaps extends React.Component {\n    render() {\n        const widthIndex = this.props.width / 16000\n        const heightIndex = this.props.height / 19000\n        const offset = {x: 40, y: 60}\n        const pointSet = mapsStore.getState().dashboardData.hotPowerGraph.map(function (point) {\n            return (\n                <React.Suspense fallback={<Point/>}>\n                    <Point\n                        x={point.x * widthIndex + offset.x} y={point.y * heightIndex + offset.y}\n                        level={point.level}\n                        type={point.type}\n                        station={point.station}\n                        line={point.line}\n                        tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                        onClick={() => hoverResponse(point.station)}\n                    />\n                </React.Suspense>\n            )\n        })\n        return (\n            <PersistGate store={mapsStore} persistor={mapsExposedMethods}>\n                <Stage style={transformToCentre} width={this.props.width + 250} height={this.props.height + 150}>\n                    <Layer id={'PMstations'} style={transformToCentre}>\n                        {pointSet}\n                    </Layer>\n                </Stage>\n            </PersistGate>\n        )\n    }\n}\n\nexport default PassengerMaps"],"sourceRoot":""}