{"version":3,"sources":["Map.js"],"names":["stationData","require","pathData","lineTintArray","Point","props","state","id","x","y","level","type","line","station","match","radius","this","fill","onClick","setPanel","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","Path","x1","y1","x2","y2","strokeWidth","points","Panel","width","height","MapFuture","pos","activated","setState","panel","alert","undefined","Fragment","widthIndex","heightIndex","pathSet","map","path","pointSet","point","showPanel"],"mappings":"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","file":"static/js/4.27bb6ca7.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line, Rect} from \"react-konva\";\nimport \"./Overview/style.css\";\n\nlet stationData = require('./stationaryPlaceholder/stations.json');\nlet pathData = require('./stationaryPlaceholder/paths.json');\nconst lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#e23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#AF7525\", \"#8643B5\", \"#567874\", \"#227754\", \"#85468E\"\n]\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x: this.props.x,\n            y: this.props.y,\n            level: this.props.level,\n            type: this.props.type,\n            line: this.props.line,\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n\n    render() {\n        const basis = 2;\n        const multiplier = 2;\n        const radius = this.state.level * multiplier * basis;\n        return (\n            <Group x={this.state.x} y={this.state.y}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                    onClick={() => this.props.setPanel(0, 'station', [this.state.x, this.state.y], 1)}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\n\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            level: this.props.level,\n            line: this.props.line\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1;\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={[this.state.x1, this.state.y1, this.state.x2, this.state.y2]}\n                stroke={'#DDD'}\n                strokeWidth={strokeWidth}\n            />\n        )\n    }\n}\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.x,\n            y: this.props.y,\n        }\n        if (this.props.type === 'station') {\n\n        }\n    }\n\n    render() {\n        const width = 50;\n        const height = 80;\n\n        return (\n            <Group>\n                <Rect width={width} height={height} fill={'#EEE'}/>\n            </Group>\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    setPanel(id, type, pos, activated) {\n        this.setState({panel: {pos, id}});\n        alert('nyan');\n    }\n\n\n    showPanel() {\n        if (this.state.pos === undefined) {\n            return (\n                <React.Fragment/>\n            )\n        }\n        return (\n            <Panel\n                x={this.state.pos[0]}\n                y={this.state.pos[1]}\n            />\n        )\n    }\n\n    render() {\n        const widthIndex = this.props.width / 1285\n        const heightIndex = this.props.height / 1037\n        const pathSet = pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    level={1}\n                />\n            )\n        });\n        const pointSet = stationData.map(function (point) {\n            return (\n                <Point\n                    x={point.x * widthIndex} y={point.y * heightIndex} level={1} station={point.station} line={point.line}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                />\n            )\n        })\n\n        return (\n            <Stage height={this.props.height + 50} width={this.props.width + 50}>\n                <Layer id={'FMpaths'}>\n                    {pathSet}\n                </Layer>\n                <Layer id={'FMstations'}>\n                    {pointSet}\n                </Layer>\n                <Layer id={'FMpanels'}>\n                    {this.showPanel()}\n                </Layer>\n            </Stage>\n        )\n    }\n}\n\nexport default MapFuture"],"sourceRoot":""}