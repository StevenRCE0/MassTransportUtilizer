{"version":3,"sources":["Widgets/Map.js"],"names":["lineTintArray","transformToCentre","position","left","top","transform","hoverResponse","type","id","line","flow","mapsStore","dispatch","hoverType","hoverID","Point","props","state","x","y","level","match","station","multiplier","this","radius","onClick","fill","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","Path","x1","y1","x2","y2","additionalCoordinates","strokeWidth","coordinates","undefined","concat","points","lineJoin","lineCap","MapFuture","widthIndex","width","heightIndex","height","pathSet","mode","getState","pathData","map","path","turnPoint","pointIndex","pointSet","stationData","point","Suspense","fallback","store","persistor","mapsExposedMethods","style"],"mappings":"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","file":"static/js/5.c8c36321.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line} from \"react-konva\";\nimport \"../Overview/style.css\";\nimport {mapsStore, mapsExposedMethods} from '../Store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nexport const lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#E23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#000\", \"#000\", \"#E67874\", \"#009734\", \"#43B7AE\"\n]\nconst transformToCentre = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n}\n\nexport function hoverResponse(type, id, line, flow) {\n    mapsStore.dispatch({\n        type: 'hoverUpdate',\n        hoverType: type,\n        hoverID: id,\n        line: line,\n        flow: flow,\n    })\n}\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x: this.props.x,\n            y: this.props.y,\n            level: this.props.level,\n            type: this.props.type,\n            line: this.props.line.match('^[0-9]+'),\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n    render() {\n        const basis = 2;\n        const multiplier = (this.props.type === \"1\") ? 3 : 2;\n        const radius = this.state.level * multiplier * basis;\n        return (\n            <Group x={this.state.x} y={this.state.y} onClick={this.props.onClick}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={(this.props.type === \"1\") ? '#171717' : this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            additionalCoordinates: this.props.additionalCoordinates,\n            level: this.props.level,\n            line: this.props.line.match('^[0-9]+'),\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1\n        const coordinates = (this.state.additionalCoordinates !== undefined) ? [this.state.x1, this.state.y1].concat(this.state.additionalCoordinates).concat([this.state.x2, this.state.y2]) : [this.state.x1, this.state.y1, this.state.x2, this.state.y2]\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={coordinates}\n                stroke={lineTintArray[this.state.line]}\n                strokeWidth={strokeWidth}\n                lineJoin={'round'}\n                lineCap={'round'}\n                onClick={this.props.onClick}\n            />\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    render() {\n        const widthIndex = this.props.width / 17500\n        const heightIndex = this.props.height / 20000\n        const heatMode = (this.props.mode === '热力图')\n        const pathSet = mapsStore.getState().pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    additionalCoordinates={(path.additionalCoordinates !== undefined) ? path.additionalCoordinates.map(function (turnPoint, pointIndex) {\n                        return((pointIndex / 2 === 0) ? turnPoint * widthIndex : turnPoint * heightIndex)\n                    }) : undefined}\n                    level={1}\n                    line={path.line}\n                    onClick={() => hoverResponse('path', path.id, path.line, path.id)} //last one to be changed\n                />\n            )\n        });\n        const pointSet = mapsStore.getState().stationData.map(function (point) {\n            return (\n                <React.Suspense fallback={<Point/>}>\n                    <Point\n                        x={point.x * widthIndex} y={point.y * heightIndex}\n                        level={heatMode ? 1 : 1}\n                        type={point.type}\n                        station={point.station}\n                        line={point.line}\n                        tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                        onClick={() => hoverResponse('station', point.station, point.line, point.id)} //last one to be changed\n                    />\n                </React.Suspense>\n\n            )\n        })\n\n        return (\n            <PersistGate store={mapsStore} persistor={mapsExposedMethods}>\n                <Stage style={transformToCentre} width={this.props.width + 250} height={this.props.height + 50}>\n                    <Layer id={'FMpaths'}>\n                        {pathSet}\n                    </Layer>\n                    <Layer id={'FMstations'}>\n                        {pointSet}\n                    </Layer>\n                </Stage>\n            </PersistGate>\n        )\n    }\n}\n\nexport default MapFuture"],"sourceRoot":""}