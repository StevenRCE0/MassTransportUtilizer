{"version":3,"sources":["Widgets/Map.js"],"names":["lineTintArray","transformToCentre","position","left","top","transform","hoverResponse","type","id","line","flow","mapsStore","dispatch","hoverType","hoverID","Point","props","state","size","match","station","basis","this","setState","multiplier","radius","level","x","y","onClick","onMouseEnter","handleHover","onMouseLeave","fill","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","HeatCircle","undefined","opacity","Path","x1","y1","x2","y2","additionalCoordinates","strokeWidth","coordinates","concat","points","lineJoin","lineCap","MapFuture","mapsState","getState","subscribe","pathData","stationData","dashboardData","hotPowerGraph","widthIndex","width","heightIndex","height","heatMode","mode","pathSet","map","path","turnPoint","pointIndex","pointSet","point","heatBackgroundSet","Fragment","store","persistor","mapsExposedMethods","style"],"mappings":"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","file":"static/js/5.62fb8d76.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line} from \"react-konva\";\nimport \"../Overview/style.css\";\nimport {mapsStore, mapsExposedMethods} from '../Store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nexport const lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#E23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#000\", \"#000\", \"#E67874\", \"#009734\", \"#43B7AE\"\n]\nconst transformToCentre = {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n}\n\nfunction hoverResponse(type, id, line, flow) {\n    mapsStore.dispatch({\n        type: 'hoverUpdate',\n        hoverType: type,\n        hoverID: id,\n        line: line,\n        flow: flow,\n    })\n}\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: 1,\n            line: this.props.line.match('^[0-9]+'),\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n    handleHover(basis) {\n        this.setState({size: basis})\n    }\n    render() {\n        const basis = 2;\n        const multiplier = (this.props.type === \"1\") ? 3 : 2;\n        const radius = this.props.level * multiplier * basis * this.state.size;\n        return (\n            <Group\n                x={this.props.x}\n                y={this.props.y}\n                onClick={this.props.onClick}\n                onMouseEnter={() => {this.handleHover(3)}}\n                onMouseLeave={() => {this.handleHover(1)}}\n            >\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={(this.props.type === \"1\") ? '#171717' : this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\nclass HeatCircle extends React.Component {\n    render() {\n        const basis = 2;\n        const radius = this.props.level * basis;\n        return (\n            <Group x={this.props.x} y={this.props.y} onClick={this.props.onClick}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={this.props.tint === undefined ? '#B93' : this.props.tint}\n                    opacity={0.23}\n                />\n            </Group>\n        )\n    }\n}\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            additionalCoordinates: this.props.additionalCoordinates,\n            level: this.props.level,\n            line: this.props.line.match('^[0-9]+'),\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1\n        const coordinates = (this.state.additionalCoordinates !== undefined) ? [this.state.x1, this.state.y1].concat(this.state.additionalCoordinates).concat([this.state.x2, this.state.y2]) : [this.state.x1, this.state.y1, this.state.x2, this.state.y2]\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={coordinates}\n                stroke={lineTintArray[this.state.line]}\n                strokeWidth={strokeWidth}\n                lineJoin={'round'}\n                lineCap={'round'}\n                onClick={this.props.onClick}\n            />\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {mapsState: mapsStore.getState()}\n        mapsStore.subscribe(() => {\n            this.setState({mapsState: mapsStore.getState()})\n        })\n    }\n\n    render() {\n        const { pathData } = this.state.mapsState\n        const stationData = this.state.mapsState.dashboardData.hotPowerGraph\n        const widthIndex = this.props.width / 17500\n        const heightIndex = this.props.height / 20000\n        const heatMode = this.props.mode === '热力图'\n        const pathSet = pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    additionalCoordinates={(path.additionalCoordinates !== undefined) ? path.additionalCoordinates.map(function (turnPoint, pointIndex) {\n                        return((pointIndex / 2 === 0) ? turnPoint * widthIndex : turnPoint * heightIndex)\n                    }) : undefined}\n                    level={1}\n                    line={path.line}\n                    onClick={() => hoverResponse('path', path.id, path.line, path.id)} //last one to be changed\n                />\n            )\n        });\n        const pointSet = stationData.map(function (point) {\n            return (\n                <Point\n                    x={point.x * widthIndex} y={point.y * heightIndex}\n                    level={1}\n                    type={point.type}\n                    station={point.station}\n                    line={point.line}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                    onClick={() => hoverResponse('station', point.station, point.line, point.level)}\n                />\n            )\n        })\n        const heatBackgroundSet = stationData.map(function (point) {\n            if (heatMode) {\n                return (\n                <HeatCircle\n                    x={point.x * widthIndex} y={point.y * heightIndex}\n                    level={point.level}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                />\n                )\n            }\n            else {\n                return <React.Fragment />\n            }\n        })\n\n        return (\n            <PersistGate store={mapsStore} persistor={mapsExposedMethods}>\n                <Stage style={transformToCentre} width={this.props.width + 250} height={this.props.height + 50}>\n                    <Layer key={'FMHeat'}>\n                        {heatBackgroundSet}\n                    </Layer>\n                    <Layer key={'FMpaths'}>\n                        {pathSet}\n                    </Layer>\n                    <Layer key={'FMstations'}>\n                        {pointSet}\n                    </Layer>\n                </Stage>\n            </PersistGate>\n        )\n    }\n}\n\nexport default MapFuture"],"sourceRoot":""}