{"version":3,"sources":["Map.js"],"names":["stationData","require","pathData","lineTintArray","Point","props","state","id","x","y","level","type","line","station","match","radius","this","fill","onClick","setPanel","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","Path","x1","y1","x2","y2","strokeWidth","coordinates","undefined","additionalCoordinates","concat","points","lineJoin","lineCap","Panel","width","height","MapFuture","pos","activated","setState","panel","alert","Fragment","widthIndex","heightIndex","pathSet","map","path","turnPoint","pointIndex","pointSet","point","showPanel"],"mappings":"mzyBAIIA,G,OAAcC,EAAQ,MACtBC,EAAWD,EAAQ,KACjBE,EAAgB,CAClB,UAAW,UAAW,UAAW,UAAW,UAAU,UAAW,OAAQ,OAAQ,UAAW,UAAW,UAAW,UAAW,WAG3HC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,GAAI,EAAKF,MAAME,GACfC,EAAG,EAAKH,MAAMG,EACdC,EAAG,EAAKJ,MAAMI,EACdC,MAAO,EAAKL,MAAMK,MAClBC,KAAM,EAAKN,MAAMM,KACjBC,KAAM,EAAKP,MAAMO,KACjBC,QAAS,EAAKR,MAAMQ,QAAQC,MAAM,WATvB,E,qDAaT,IAAD,OAGCC,EADa,EACJC,KAAKV,MAAMI,MAFZ,EAGd,OACI,eAAC,QAAD,CAAOF,EAAGQ,KAAKV,MAAME,EAAGC,EAAGO,KAAKV,MAAMG,EAAtC,UACI,cAAC,SAAD,CACIM,OAAiB,GAATA,EACRE,KAAM,OACNC,QAAS,kBAAM,EAAKb,MAAMc,SAAS,EAAG,UAAW,CAAC,EAAKb,MAAME,EAAG,EAAKF,MAAMG,GAAI,MAEnF,cAAC,OAAD,CACIW,YAAsB,GAATL,EACbM,YAAaN,EACbE,KAAMD,KAAKX,MAAMiB,OAErB,cAAC,OAAD,CACIC,KAAMP,KAAKV,MAAMO,QACjBW,SAAU,EACVC,OAAQ,OACRC,wBAAwB,EACxBlB,GAAIO,W,GAnCJY,IAAMC,WA0CpBC,E,kDACF,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,GAAI,EAAKF,MAAME,GACfuB,GAAI,EAAKzB,MAAMyB,GACfC,GAAI,EAAK1B,MAAM0B,GACfC,GAAI,EAAK3B,MAAM2B,GACfC,GAAI,EAAK5B,MAAM4B,GACfvB,MAAO,EAAKL,MAAMK,MAClBE,KAAM,EAAKP,MAAMO,MATN,E,qDAcf,IAAMsB,EAAc,EAAuB,GAAnBlB,KAAKV,MAAMI,MAC7ByB,OAAoDC,IAArCpB,KAAKX,MAAMgC,sBAAuC,CAACrB,KAAKV,MAAMwB,GAAId,KAAKV,MAAMyB,IAAIO,OAAOtB,KAAKX,MAAMgC,uBAAuBC,OAAO,CAACtB,KAAKV,MAAM0B,GAAIhB,KAAKV,MAAM2B,KAAO,CAACjB,KAAKV,MAAMwB,GAAId,KAAKV,MAAMyB,GAAIf,KAAKV,MAAM0B,GAAIhB,KAAKV,MAAM2B,IACjP,OACI,cAAC,OAAD,CACIzB,EAAG,EACHC,EAAG,EACH8B,OAAQJ,EACRV,OAAQ,OACRS,YAAaA,EACbM,SAAU,QACVC,QAAS,c,GAzBNd,IAAMC,WA+BnBc,E,kDACF,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTE,EAAG,EAAKH,MAAMG,EACdC,EAAG,EAAKJ,MAAMI,GAEd,EAAKJ,MAAMM,KANA,E,qDAef,OACI,cAAC,QAAD,UACI,cAAC,OAAD,CAAMgC,MALA,GAKcC,OAJb,GAI6B3B,KAAM,e,GAlBtCU,IAAMC,WAwBpBiB,E,kDACF,WAAYxC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAKVC,EAAII,EAAMmC,EAAKC,GACpB/B,KAAKgC,SAAS,CAACC,MAAO,CAACH,MAAKvC,QAC5B2C,MAAM,U,kCAKN,YAAuBd,IAAnBpB,KAAKV,MAAMwC,IAEP,cAAC,IAAMK,SAAP,IAIJ,cAACT,EAAD,CACIlC,EAAGQ,KAAKV,MAAMwC,IAAI,GAClBrC,EAAGO,KAAKV,MAAMwC,IAAI,O,+BAM1B,IAAMM,EAAapC,KAAKX,MAAMsC,MAAQ,KAChCU,EAAcrC,KAAKX,MAAMuC,OAAS,KAClCU,EAAUpD,EAASqD,KAAI,SAAUC,GACnC,OACI,cAAC3B,EAAD,CACIC,GAAI0B,EAAK1B,GAAKsB,EACdrB,GAAIyB,EAAKzB,GAAKsB,EACdrB,GAAIwB,EAAKxB,GAAKoB,EACdnB,GAAIuB,EAAKvB,GAAKoB,EACdhB,2BAAuDD,IAA/BoB,EAAKnB,sBAAuCmB,EAAKnB,sBAAsBkB,KAAI,SAAUE,EAAWC,GACpH,OAAQA,EAAa,IAAM,EAAKD,EAAYL,EAAaK,EAAYJ,UACpEjB,EACL1B,MAAO,OAIbiD,EAAW3D,EAAYuD,KAAI,SAAUK,GACvC,OACI,cAACxD,EAAD,CACII,EAAGoD,EAAMpD,EAAI4C,EAAY3C,EAAGmD,EAAMnD,EAAI4C,EAAa3C,MAAO,EAAGG,QAAS+C,EAAM/C,QAASD,KAAMgD,EAAMhD,KACjGU,KAAMnB,EAAcyD,EAAMhD,KAAKE,MAAM,iBAKjD,OACI,eAAC,QAAD,CAAO8B,OAAQ5B,KAAKX,MAAMuC,OAAS,GAAID,MAAO3B,KAAKX,MAAMsC,MAAQ,GAAjE,UACI,cAAC,QAAD,CAAOpC,GAAI,UAAX,SACK+C,IAEL,cAAC,QAAD,CAAO/C,GAAI,aAAX,SACKoD,IAEL,cAAC,QAAD,CAAOpD,GAAI,WAAX,SACKS,KAAK6C,qB,GA7DFlC,IAAMC,WAoEfiB","file":"static/js/4.59e7fe00.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line, Rect} from \"react-konva\";\nimport \"./Overview/style.css\";\n\nlet stationData = require('./stationaryPlaceholder/stations.json');\nlet pathData = require('./stationaryPlaceholder/paths.json');\nconst lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#E23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#AF7525\", \"#8643B5\", \"#567874\", \"#227754\", \"#85468E\"\n]\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x: this.props.x,\n            y: this.props.y,\n            level: this.props.level,\n            type: this.props.type,\n            line: this.props.line,\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n\n    render() {\n        const basis = 2;\n        const multiplier = 2;\n        const radius = this.state.level * multiplier * basis;\n        return (\n            <Group x={this.state.x} y={this.state.y}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                    onClick={() => this.props.setPanel(0, 'station', [this.state.x, this.state.y], 1)}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\n\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            level: this.props.level,\n            line: this.props.line\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1\n        const coordinates = (this.props.additionalCoordinates !== undefined) ? [this.state.x1, this.state.y1].concat(this.props.additionalCoordinates).concat([this.state.x2, this.state.y2]) : [this.state.x1, this.state.y1, this.state.x2, this.state.y2]\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={coordinates}\n                stroke={'#DDD'}\n                strokeWidth={strokeWidth}\n                lineJoin={'round'}\n                lineCap={'round'}\n            />\n        )\n    }\n}\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.x,\n            y: this.props.y,\n        }\n        if (this.props.type === 'station') {\n\n        }\n    }\n\n    render() {\n        const width = 50;\n        const height = 80;\n\n        return (\n            <Group>\n                <Rect width={width} height={height} fill={'#EEE'}/>\n            </Group>\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    setPanel(id, type, pos, activated) {\n        this.setState({panel: {pos, id}});\n        alert('nyan');\n    }\n\n\n    showPanel() {\n        if (this.state.pos === undefined) {\n            return (\n                <React.Fragment/>\n            )\n        }\n        return (\n            <Panel\n                x={this.state.pos[0]}\n                y={this.state.pos[1]}\n            />\n        )\n    }\n\n    render() {\n        const widthIndex = this.props.width / 1285\n        const heightIndex = this.props.height / 1037\n        const pathSet = pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    additionalCoordinates={(path.additionalCoordinates !== undefined) ? path.additionalCoordinates.map(function (turnPoint, pointIndex) {\n                        return((pointIndex / 2 === 0) ? turnPoint * widthIndex : turnPoint * heightIndex)\n                    }) : undefined}\n                    level={1}\n                />\n            )\n        });\n        const pointSet = stationData.map(function (point) {\n            return (\n                <Point\n                    x={point.x * widthIndex} y={point.y * heightIndex} level={1} station={point.station} line={point.line}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                />\n            )\n        })\n\n        return (\n            <Stage height={this.props.height + 50} width={this.props.width + 50}>\n                <Layer id={'FMpaths'}>\n                    {pathSet}\n                </Layer>\n                <Layer id={'FMstations'}>\n                    {pointSet}\n                </Layer>\n                <Layer id={'FMpanels'}>\n                    {this.showPanel()}\n                </Layer>\n            </Stage>\n        )\n    }\n}\n\nexport default MapFuture"],"sourceRoot":""}