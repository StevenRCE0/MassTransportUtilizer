{"version":3,"sources":["Map.js"],"names":["stationData","require","pathData","lineTintArray","Point","props","state","id","x","y","level","type","line","match","station","multiplier","this","radius","fill","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","Path","x1","y1","x2","y2","additionalCoordinates","strokeWidth","coordinates","undefined","concat","points","lineJoin","lineCap","MapFuture","widthIndex","width","heightIndex","height","pathSet","map","path","turnPoint","pointIndex","pointSet","point"],"mappings":"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","file":"static/js/4.4522d751.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line} from \"react-konva\";\nimport \"./Overview/style.css\";\n\nconst stationData = require('./stationaryPlaceholder/stations.json');\nconst pathData = require('./stationaryPlaceholder/paths.json');\nconst lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#E23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#000\", \"#000\", \"#E67874\", \"#009734\", \"#43B7AE\"\n]\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x: this.props.x,\n            y: this.props.y,\n            level: this.props.level,\n            type: this.props.type,\n            line: this.props.line.match('^[0-9]+'),\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n\n    render() {\n        const basis = 2;\n        const multiplier = (this.props.type === \"1\") ? 3 : 2;\n        const radius = this.state.level * multiplier * basis;\n        return (\n            <Group x={this.state.x} y={this.state.y}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={(this.props.type === \"1\") ? '#171717' : this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\n\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            additionalCoordinates: this.props.additionalCoordinates,\n            level: this.props.level,\n            line: this.props.line.match('^[0-9]+'),\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1\n        const coordinates = (this.state.additionalCoordinates !== undefined) ? [this.state.x1, this.state.y1].concat(this.state.additionalCoordinates).concat([this.state.x2, this.state.y2]) : [this.state.x1, this.state.y1, this.state.x2, this.state.y2]\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={coordinates}\n                stroke={lineTintArray[this.state.line]}\n                strokeWidth={strokeWidth}\n                lineJoin={'round'}\n                lineCap={'round'}\n            />\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        const widthIndex = this.props.width / 17500\n        const heightIndex = this.props.height / 20000\n        const pathSet = pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    additionalCoordinates={(path.additionalCoordinates !== undefined) ? path.additionalCoordinates.map(function (turnPoint, pointIndex) {\n                        return((pointIndex / 2 === 0) ? turnPoint * widthIndex : turnPoint * heightIndex)\n                    }) : undefined}\n                    level={1}\n                    line={path.line}\n                />\n            )\n        });\n        const pointSet = stationData.map(function (point) {\n            return (\n                <Point\n                    x={point.x * widthIndex} y={point.y * heightIndex}\n                    level={1}\n                    type={point.type}\n                    station={point.station}\n                    line={point.line}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                />\n            )\n        })\n\n        return (\n            <Stage height={this.props.height + 50} width={this.props.width + 250}>\n                <Layer id={'FMpaths'}>\n                    {pathSet}\n                </Layer>\n                <Layer id={'FMstations'}>\n                    {pointSet}\n                </Layer>\n            </Stage>\n        )\n    }\n}\n\nexport default MapFuture"],"sourceRoot":""}