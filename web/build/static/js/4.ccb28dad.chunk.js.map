{"version":3,"sources":["Widgets/Map.js"],"names":["lineTintArray","hoverResponse","type","id","line","store","dispatch","hoverType","hoverID","Point","props","state","x","y","level","match","station","multiplier","this","radius","onClick","fill","innerRadius","outerRadius","tint","text","fontSize","stroke","fillAfterStrokeEnabled","React","Component","Path","x1","y1","x2","y2","additionalCoordinates","strokeWidth","coordinates","undefined","concat","points","lineJoin","lineCap","MapFuture","mode","mapsStore","widthIndex","width","heightIndex","height","heatMode","pathSet","getState","pathData","map","path","turnPoint","pointIndex","pointSet","stationData","point","persistor","mapsExposedMethods"],"mappings":"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","file":"static/js/4.ccb28dad.chunk.js","sourcesContent":["import React from \"react\";\nimport {Stage, Layer, Circle, Group, Text, Ring, Line} from \"react-konva\";\nimport \"../Overview/style.css\";\nimport store, { mapsStore, mapsExposedMethods } from '../Store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst lineTintArray = [\n    \"#ADEA7D\", \"#FBDE5D\", \"#E23424\", \"#3487E9\", \"#6937E5\",\"#984323\", \"#000\", \"#000\", \"#000\", \"#000\", \"#E67874\", \"#009734\", \"#43B7AE\"\n]\n\nfunction hoverResponse(type, id, line) {\n    store.dispatch({\n        type: 'hoverUpdate',\n        hoverType: type,\n        hoverID: id,\n        line: line\n    })\n}\n\nclass Point extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x: this.props.x,\n            y: this.props.y,\n            level: this.props.level,\n            type: this.props.type,\n            line: this.props.line.match('^[0-9]+'),\n            station: this.props.station.match('[0-9]+'),\n        }\n    }\n    render() {\n        const basis = 2;\n        const multiplier = (this.props.type === \"1\") ? 3 : 2;\n        const radius = this.state.level * multiplier * basis;\n        return (\n            <Group x={this.state.x} y={this.state.y} onClick={this.props.onClick}>\n                <Circle\n                    radius={radius * 0.5}\n                    fill={'#FFF'}\n                />\n                <Ring\n                    innerRadius={radius * 0.5}\n                    outerRadius={radius}\n                    fill={(this.props.type === \"1\") ? '#171717' : this.props.tint}\n                />\n                <Text\n                    text={this.state.station}\n                    fontSize={9}\n                    stroke={'#FFF'}\n                    fillAfterStrokeEnabled={true}\n                    x={-radius}\n                />\n            </Group>\n        )\n    }\n}\n\nclass Path extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n            x1: this.props.x1,\n            y1: this.props.y1,\n            x2: this.props.x2,\n            y2: this.props.y2,\n            additionalCoordinates: this.props.additionalCoordinates,\n            level: this.props.level,\n            line: this.props.line.match('^[0-9]+'),\n        }\n    }\n\n    render() {\n        const strokeWidth = 5 + this.state.level * 0.1\n        const coordinates = (this.state.additionalCoordinates !== undefined) ? [this.state.x1, this.state.y1].concat(this.state.additionalCoordinates).concat([this.state.x2, this.state.y2]) : [this.state.x1, this.state.y1, this.state.x2, this.state.y2]\n        return (\n            <Line\n                x={0}\n                y={0}\n                points={coordinates}\n                stroke={lineTintArray[this.state.line]}\n                strokeWidth={strokeWidth}\n                lineJoin={'round'}\n                lineCap={'round'}\n                onClick={this.props.onClick}\n            />\n        )\n    }\n}\n\nclass MapFuture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: this.props.mode\n        }\n    }\n\n    render() {\n        mapsStore.dispatch({type: 'refresh'})\n        const widthIndex = this.props.width / 17500\n        const heightIndex = this.props.height / 20000\n        const heatMode = (this.state.mode === '热力图')\n        const pathSet = mapsStore.getState().pathData.map(function (path) {\n            return (\n                <Path\n                    x1={path.x1 * widthIndex}\n                    y1={path.y1 * heightIndex}\n                    x2={path.x2 * widthIndex}\n                    y2={path.y2 * heightIndex}\n                    additionalCoordinates={(path.additionalCoordinates !== undefined) ? path.additionalCoordinates.map(function (turnPoint, pointIndex) {\n                        return((pointIndex / 2 === 0) ? turnPoint * widthIndex : turnPoint * heightIndex)\n                    }) : undefined}\n                    level={1}\n                    line={path.line}\n                    onClick={() => hoverResponse('path', path.id, path.line)}\n                />\n            )\n        });\n        const pointSet = mapsStore.getState().stationData.map(function (point) {\n            return (\n                <Point\n                    x={point.x * widthIndex} y={point.y * heightIndex}\n                    level={heatMode ? point.level : 1}\n                    type={point.type}\n                    station={point.station}\n                    line={point.line}\n                    tint={lineTintArray[point.line.match(\"^[0-9]+\")]}\n                    onClick={() => hoverResponse('station', point.station, point.line)}\n                />\n            )\n        })\n\n        return (\n            <PersistGate store={mapsStore} persistor={mapsExposedMethods}>\n                <Stage height={this.props.height + 50} width={this.props.width + 250}>\n                    <Layer id={'FMpaths'}>\n                        {pathSet}\n                    </Layer>\n                    <Layer id={'FMstations'}>\n                        {pointSet}\n                    </Layer>\n                </Stage>\n            </PersistGate>\n        )\n    }\n}\n\nexport default MapFuture"],"sourceRoot":""}